/*
 * This file is generated by jOOQ.
 */
package ru.manannikov.jooqjpa.generated.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Users implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID userId;
    private final String userUsername;
    private final String userPassword;
    private final String userEmail;
    private final String userLastName;
    private final String userFirstName;
    private final String userMiddleName;

    public Users(Users value) {
        this.userId = value.userId;
        this.userUsername = value.userUsername;
        this.userPassword = value.userPassword;
        this.userEmail = value.userEmail;
        this.userLastName = value.userLastName;
        this.userFirstName = value.userFirstName;
        this.userMiddleName = value.userMiddleName;
    }

    public Users(
        UUID userId,
        String userUsername,
        String userPassword,
        String userEmail,
        String userLastName,
        String userFirstName,
        String userMiddleName
    ) {
        this.userId = userId;
        this.userUsername = userUsername;
        this.userPassword = userPassword;
        this.userEmail = userEmail;
        this.userLastName = userLastName;
        this.userFirstName = userFirstName;
        this.userMiddleName = userMiddleName;
    }

    /**
     * Getter for <code>USERS.USER_ID</code>.
     */
    @NotNull
    public UUID getUserId() {
        return this.userId;
    }

    /**
     * Getter for <code>USERS.USER_USERNAME</code>.
     */
    @NotNull
    @Size(max = 128)
    public String getUserUsername() {
        return this.userUsername;
    }

    /**
     * Getter for <code>USERS.USER_PASSWORD</code>.
     */
    @NotNull
    @Size(max = 72)
    public String getUserPassword() {
        return this.userPassword;
    }

    /**
     * Getter for <code>USERS.USER_EMAIL</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getUserEmail() {
        return this.userEmail;
    }

    /**
     * Getter for <code>USERS.USER_LAST_NAME</code>.
     */
    @NotNull
    @Size(max = 64)
    public String getUserLastName() {
        return this.userLastName;
    }

    /**
     * Getter for <code>USERS.USER_FIRST_NAME</code>.
     */
    @NotNull
    @Size(max = 32)
    public String getUserFirstName() {
        return this.userFirstName;
    }

    /**
     * Getter for <code>USERS.USER_MIDDLE_NAME</code>.
     */
    @Size(max = 46)
    public String getUserMiddleName() {
        return this.userMiddleName;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Users other = (Users) obj;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.userUsername == null) {
            if (other.userUsername != null)
                return false;
        }
        else if (!this.userUsername.equals(other.userUsername))
            return false;
        if (this.userPassword == null) {
            if (other.userPassword != null)
                return false;
        }
        else if (!this.userPassword.equals(other.userPassword))
            return false;
        if (this.userEmail == null) {
            if (other.userEmail != null)
                return false;
        }
        else if (!this.userEmail.equals(other.userEmail))
            return false;
        if (this.userLastName == null) {
            if (other.userLastName != null)
                return false;
        }
        else if (!this.userLastName.equals(other.userLastName))
            return false;
        if (this.userFirstName == null) {
            if (other.userFirstName != null)
                return false;
        }
        else if (!this.userFirstName.equals(other.userFirstName))
            return false;
        if (this.userMiddleName == null) {
            if (other.userMiddleName != null)
                return false;
        }
        else if (!this.userMiddleName.equals(other.userMiddleName))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.userUsername == null) ? 0 : this.userUsername.hashCode());
        result = prime * result + ((this.userPassword == null) ? 0 : this.userPassword.hashCode());
        result = prime * result + ((this.userEmail == null) ? 0 : this.userEmail.hashCode());
        result = prime * result + ((this.userLastName == null) ? 0 : this.userLastName.hashCode());
        result = prime * result + ((this.userFirstName == null) ? 0 : this.userFirstName.hashCode());
        result = prime * result + ((this.userMiddleName == null) ? 0 : this.userMiddleName.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Users (");

        sb.append(userId);
        sb.append(", ").append(userUsername);
        sb.append(", ").append(userPassword);
        sb.append(", ").append(userEmail);
        sb.append(", ").append(userLastName);
        sb.append(", ").append(userFirstName);
        sb.append(", ").append(userMiddleName);

        sb.append(")");
        return sb.toString();
    }
}
