/*
 * This file is generated by jOOQ.
 */
package ru.manannikov.jooqjpa.generated.tables.pojos;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Animals implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer animalId;
    private final String animalRussianName;
    private final String animalLatinName;
    private final Short taxonomicRankId;
    private final String animalNaturalHabitat;
    private final String animalImageUri;

    public Animals(Animals value) {
        this.animalId = value.animalId;
        this.animalRussianName = value.animalRussianName;
        this.animalLatinName = value.animalLatinName;
        this.taxonomicRankId = value.taxonomicRankId;
        this.animalNaturalHabitat = value.animalNaturalHabitat;
        this.animalImageUri = value.animalImageUri;
    }

    public Animals(
        Integer animalId,
        String animalRussianName,
        String animalLatinName,
        Short taxonomicRankId,
        String animalNaturalHabitat,
        String animalImageUri
    ) {
        this.animalId = animalId;
        this.animalRussianName = animalRussianName;
        this.animalLatinName = animalLatinName;
        this.taxonomicRankId = taxonomicRankId;
        this.animalNaturalHabitat = animalNaturalHabitat;
        this.animalImageUri = animalImageUri;
    }

    /**
     * Getter for <code>ANIMALS.ANIMAL_ID</code>.
     */
    public Integer getAnimalId() {
        return this.animalId;
    }

    /**
     * Getter for <code>ANIMALS.ANIMAL_RUSSIAN_NAME</code>.
     */
    @NotNull
    @Size(max = 1000000000)
    public String getAnimalRussianName() {
        return this.animalRussianName;
    }

    /**
     * Getter for <code>ANIMALS.ANIMAL_LATIN_NAME</code>.
     */
    @NotNull
    @Size(max = 1000000000)
    public String getAnimalLatinName() {
        return this.animalLatinName;
    }

    /**
     * Getter for <code>ANIMALS.TAXONOMIC_RANK_ID</code>.
     */
    @NotNull
    public Short getTaxonomicRankId() {
        return this.taxonomicRankId;
    }

    /**
     * Getter for <code>ANIMALS.ANIMAL_NATURAL_HABITAT</code>.
     */
    @Size(max = 1000000000)
    public String getAnimalNaturalHabitat() {
        return this.animalNaturalHabitat;
    }

    /**
     * Getter for <code>ANIMALS.ANIMAL_IMAGE_URI</code>.
     */
    @Size(max = 1000000000)
    public String getAnimalImageUri() {
        return this.animalImageUri;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Animals other = (Animals) obj;
        if (this.animalId == null) {
            if (other.animalId != null)
                return false;
        }
        else if (!this.animalId.equals(other.animalId))
            return false;
        if (this.animalRussianName == null) {
            if (other.animalRussianName != null)
                return false;
        }
        else if (!this.animalRussianName.equals(other.animalRussianName))
            return false;
        if (this.animalLatinName == null) {
            if (other.animalLatinName != null)
                return false;
        }
        else if (!this.animalLatinName.equals(other.animalLatinName))
            return false;
        if (this.taxonomicRankId == null) {
            if (other.taxonomicRankId != null)
                return false;
        }
        else if (!this.taxonomicRankId.equals(other.taxonomicRankId))
            return false;
        if (this.animalNaturalHabitat == null) {
            if (other.animalNaturalHabitat != null)
                return false;
        }
        else if (!this.animalNaturalHabitat.equals(other.animalNaturalHabitat))
            return false;
        if (this.animalImageUri == null) {
            if (other.animalImageUri != null)
                return false;
        }
        else if (!this.animalImageUri.equals(other.animalImageUri))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.animalId == null) ? 0 : this.animalId.hashCode());
        result = prime * result + ((this.animalRussianName == null) ? 0 : this.animalRussianName.hashCode());
        result = prime * result + ((this.animalLatinName == null) ? 0 : this.animalLatinName.hashCode());
        result = prime * result + ((this.taxonomicRankId == null) ? 0 : this.taxonomicRankId.hashCode());
        result = prime * result + ((this.animalNaturalHabitat == null) ? 0 : this.animalNaturalHabitat.hashCode());
        result = prime * result + ((this.animalImageUri == null) ? 0 : this.animalImageUri.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Animals (");

        sb.append(animalId);
        sb.append(", ").append(animalRussianName);
        sb.append(", ").append(animalLatinName);
        sb.append(", ").append(taxonomicRankId);
        sb.append(", ").append(animalNaturalHabitat);
        sb.append(", ").append(animalImageUri);

        sb.append(")");
        return sb.toString();
    }
}
