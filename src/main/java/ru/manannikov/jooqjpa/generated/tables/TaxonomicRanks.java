/*
 * This file is generated by jOOQ.
 */
package ru.manannikov.jooqjpa.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.manannikov.jooqjpa.generated.DefaultSchema;
import ru.manannikov.jooqjpa.generated.Keys;
import ru.manannikov.jooqjpa.generated.tables.Animals.AnimalsPath;
import ru.manannikov.jooqjpa.generated.tables.TaxonomicRankTypes.TaxonomicRankTypesPath;
import ru.manannikov.jooqjpa.generated.tables.TaxonomicRanks.TaxonomicRanksPath;
import ru.manannikov.jooqjpa.generated.tables.records.TaxonomicRanksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TaxonomicRanks extends TableImpl<TaxonomicRanksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TAXONOMIC_RANKS</code>
     */
    public static final TaxonomicRanks TAXONOMIC_RANKS = new TaxonomicRanks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxonomicRanksRecord> getRecordType() {
        return TaxonomicRanksRecord.class;
    }

    /**
     * The column <code>TAXONOMIC_RANKS.TAXONOMIC_RANK_ID</code>.
     */
    public final TableField<TaxonomicRanksRecord, Short> TAXONOMIC_RANK_ID = createField(DSL.name("TAXONOMIC_RANK_ID"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TAXONOMIC_RANKS.TAXONOMIC_RANK_PARENT_ID</code>.
     */
    public final TableField<TaxonomicRanksRecord, Short> TAXONOMIC_RANK_PARENT_ID = createField(DSL.name("TAXONOMIC_RANK_PARENT_ID"), SQLDataType.SMALLINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>TAXONOMIC_RANKS.TAXONOMIC_RANK_TYPE</code>.
     */
    public final TableField<TaxonomicRanksRecord, Short> TAXONOMIC_RANK_TYPE = createField(DSL.name("TAXONOMIC_RANK_TYPE"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>TAXONOMIC_RANKS.TAXONOMIC_RANK_NAME</code>.
     */
    public final TableField<TaxonomicRanksRecord, String> TAXONOMIC_RANK_NAME = createField(DSL.name("TAXONOMIC_RANK_NAME"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    private TaxonomicRanks(Name alias, Table<TaxonomicRanksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TaxonomicRanks(Name alias, Table<TaxonomicRanksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>TAXONOMIC_RANKS</code> table reference
     */
    public TaxonomicRanks(String alias) {
        this(DSL.name(alias), TAXONOMIC_RANKS);
    }

    /**
     * Create an aliased <code>TAXONOMIC_RANKS</code> table reference
     */
    public TaxonomicRanks(Name alias) {
        this(alias, TAXONOMIC_RANKS);
    }

    /**
     * Create a <code>TAXONOMIC_RANKS</code> table reference
     */
    public TaxonomicRanks() {
        this(DSL.name("TAXONOMIC_RANKS"), null);
    }

    public <O extends Record> TaxonomicRanks(Table<O> path, ForeignKey<O, TaxonomicRanksRecord> childPath, InverseForeignKey<O, TaxonomicRanksRecord> parentPath) {
        super(path, childPath, parentPath, TAXONOMIC_RANKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TaxonomicRanksPath extends TaxonomicRanks implements Path<TaxonomicRanksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TaxonomicRanksPath(Table<O> path, ForeignKey<O, TaxonomicRanksRecord> childPath, InverseForeignKey<O, TaxonomicRanksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TaxonomicRanksPath(Name alias, Table<TaxonomicRanksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TaxonomicRanksPath as(String alias) {
            return new TaxonomicRanksPath(DSL.name(alias), this);
        }

        @Override
        public TaxonomicRanksPath as(Name alias) {
            return new TaxonomicRanksPath(alias, this);
        }

        @Override
        public TaxonomicRanksPath as(Table<?> alias) {
            return new TaxonomicRanksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TaxonomicRanksRecord, Short> getIdentity() {
        return (Identity<TaxonomicRanksRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaxonomicRanksRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A;
    }

    @Override
    public List<UniqueKey<TaxonomicRanksRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_A9);
    }

    @Override
    public List<ForeignKey<TaxonomicRanksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TAXOMIC_RANK_HAS_TYPE, Keys.FK_TAXOMIC_RANK_LEVEL);
    }

    private transient TaxonomicRankTypesPath _taxonomicRankTypes;

    /**
     * Get the implicit join path to the <code>TAXONOMIC_RANK_TYPES</code>
     * table.
     */
    public TaxonomicRankTypesPath taxonomicRankTypes() {
        if (_taxonomicRankTypes == null)
            _taxonomicRankTypes = new TaxonomicRankTypesPath(this, Keys.FK_TAXOMIC_RANK_HAS_TYPE, null);

        return _taxonomicRankTypes;
    }

    private transient TaxonomicRanksPath _taxonomicRanks;

    /**
     * Get the implicit join path to the <code>TAXONOMIC_RANKS</code> table.
     */
    public TaxonomicRanksPath taxonomicRanks() {
        if (_taxonomicRanks == null)
            _taxonomicRanks = new TaxonomicRanksPath(this, Keys.FK_TAXOMIC_RANK_LEVEL, null);

        return _taxonomicRanks;
    }

    private transient AnimalsPath _animals;

    /**
     * Get the implicit to-many join path to the <code>ANIMALS</code> table
     */
    public AnimalsPath animals() {
        if (_animals == null)
            _animals = new AnimalsPath(this, null, Keys.FK_ANIMAL_DESCRIBED_BY_TAXONOMIC_RANK.getInverseKey());

        return _animals;
    }

    @Override
    public TaxonomicRanks as(String alias) {
        return new TaxonomicRanks(DSL.name(alias), this);
    }

    @Override
    public TaxonomicRanks as(Name alias) {
        return new TaxonomicRanks(alias, this);
    }

    @Override
    public TaxonomicRanks as(Table<?> alias) {
        return new TaxonomicRanks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxonomicRanks rename(String name) {
        return new TaxonomicRanks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxonomicRanks rename(Name name) {
        return new TaxonomicRanks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaxonomicRanks rename(Table<?> name) {
        return new TaxonomicRanks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks where(Condition condition) {
        return new TaxonomicRanks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxonomicRanks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxonomicRanks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxonomicRanks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TaxonomicRanks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TaxonomicRanks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
